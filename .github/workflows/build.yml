name: Expirefly Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'logo.png'
      - 'LICENSE'

permissions:
  contents: write

jobs:
  build-unsigned-ipa:
    name: Build .ipa for iOS
    runs-on: macos-15
    timeout-minutes: 60
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_exists: ${{ steps.check_release.outputs.exists }}
      changelog: ${{ steps.generate_changelog.outputs.CHANGELOG }}
      cached_object_version: ${{ steps.cache_object_version.outputs.object_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show Xcode Version
        run: |
          echo "=== xcodebuild -version ==="
          xcodebuild -version || true
          echo "=== sw_vers ==="
          sw_vers || true

      - name: Install Build Tools
        run: |
          # jq
          if ! command -v jq >/dev/null 2>&1; then
            echo "jq not found — attempting to install via brew"
            if command -v brew >/dev/null 2>&1; then
              brew install jq || true
            fi
          fi

          # yq
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not found — attempting to install via brew"
            if command -v brew >/dev/null 2>&1; then
              brew install yq || true
            fi
          fi

          # gh (GitHub CLI)
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not found — attempting to install via brew"
            if command -v brew >/dev/null 2>&1; then
              brew install gh || true
            fi
          fi

          # xcodegen
          if ! command -v xcodegen >/dev/null 2>&1; then
            echo "xcodegen not found — attempting to install via brew"
            if command -v brew >/dev/null 2>&1; then
              brew install xcodegen || true
            fi
          fi

          # Fallback: official gh installer script (works across platforms)
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh still not found — attempting official installer script"
            curl -fsSL https://cli.github.com/install.sh | sh || true
          fi

          echo "Tool versions (if installed):"
          echo "jq: $(jq --version 2>/dev/null || echo 'not installed')"
          echo "yq: $(yq --version 2>/dev/null || echo 'not installed')"
          echo "gh: $(gh --version 2>/dev/null || echo 'not installed')"
          echo "xcodegen: $(xcodegen --version 2>/dev/null || echo 'not installed')"
        shell: bash

      - name: Check Project Files
        run: |
          echo "Workspace files:"
          ls -la || true
          echo "project.yml (first 200 lines):"
          sed -n '1,200p' project.yml || true

      - name: Generate Xcode Project
        run: |
          set -e
          xcodegen generate --spec project.yml
          echo "Generated project at: $(pwd)/expirefly.xcodeproj"
          echo "project.pbxproj header (first 60 lines):"
          sed -n '1,60p' expirefly.xcodeproj/project.pbxproj || true

      - name: Resolve Swift Packages
        run: |
          set -e
          echo "Resolving Swift package dependencies for expirefly..."
          xcodebuild -resolvePackageDependencies -project expirefly.xcodeproj -scheme expirefly -configuration Release

      - name: Build IPA
        id: cache_object_version
        run: |
          set -e
          ARCHIVE_PATH="$PWD/build/expirefly.xcarchive"
          mkdir -p build
          
          # Try to read cached objectVersion from file
          CACHE_FILE=".object_version_cache"
          CACHED_VERSION=""
          candidates=(77 70 63 60 56 55)
          
          if [ -f "$CACHE_FILE" ]; then
            CACHED_VERSION=$(cat "$CACHE_FILE" | tr -d '\n')
            echo "Found cached objectVersion: $CACHED_VERSION"
            
            # Test the cached version first
            echo "----- Testing cached objectVersion = $CACHED_VERSION -----"
            /usr/bin/perl -0777 -pe "s/objectVersion = \\d+;/objectVersion = $CACHED_VERSION;/" -i.bak expirefly.xcodeproj/project.pbxproj || true
            
            set +e
            xcodebuild clean archive \
              -project expirefly.xcodeproj \
              -scheme expirefly \
              -archivePath "$ARCHIVE_PATH" \
              -sdk iphoneos \
              -configuration Release \
              CODE_SIGN_IDENTITY="" CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO
            rc=$?
            set -e
            
            if [ $rc -eq 0 ]; then
              echo "✅ Cached objectVersion $CACHED_VERSION works!"
              echo "object_version=$CACHED_VERSION" >> $GITHUB_OUTPUT
              echo "$CACHED_VERSION" > "$CACHE_FILE"
              exit 0
            else
              echo "❌ Cached objectVersion $CACHED_VERSION failed, trying other candidates..."
            fi
          fi
          
          # If no cache or cached version failed, try all candidates
          build_ok=0
          for v in "${candidates[@]}"; do
            echo "----- Attempting build with objectVersion = $v -----"
            /usr/bin/perl -0777 -pe "s/objectVersion = \\d+;/objectVersion = $v;/" -i.bak expirefly.xcodeproj/project.pbxproj || true
            echo "Applied objectVersion $v. Header preview:"
            sed -n '1,20p' expirefly.xcodeproj/project.pbxproj || true
            echo "Running xcodebuild archive..."
            set +e
            xcodebuild clean archive \
              -project expirefly.xcodeproj \
              -scheme expirefly \
              -archivePath "$ARCHIVE_PATH" \
              -sdk iphoneos \
              -configuration Release \
              CODE_SIGN_IDENTITY="" CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO
            rc=$?
            set -e
            if [ $rc -eq 0 ]; then
              echo "✅ xcodebuild succeeded with objectVersion = $v"
              echo "object_version=$v" >> $GITHUB_OUTPUT
              echo "$v" > "$CACHE_FILE"
              echo "Cached successful objectVersion: $v"
              build_ok=1
              break
            else
              echo "❌ xcodebuild failed (exit $rc). Trying next objectVersion..."
            fi
          done
          
          if [ "$build_ok" -ne 1 ]; then
            echo "ERROR: All objectVersion attempts failed. Dumping debug info:"
            echo "===== project.pbxproj header ====="
            sed -n '1,200p' expirefly.xcodeproj/project.pbxproj || true
            echo "===== build directory listing ====="
            ls -la build || true
            exit 74
          fi

      - name: Package Device IPA
        run: |
          set -e
          ARCHIVE_PATH="$PWD/build/expirefly.xcarchive"
          APP_PATH="$ARCHIVE_PATH/Products/Applications/expirefly.app"
          OUTPUT_IPA="build/com.supergamer474.expirefly-unsigned-ios.ipa"
          echo "Device app path: $APP_PATH"
          if [ ! -d "$APP_PATH" ]; then
            echo "ERROR: App not found at expected path. Listing archive contents:"
            ls -la "$ARCHIVE_PATH" || true
            exit 1
          fi
          mkdir -p build/Payload
          rm -rf build/Payload/* || true
          cp -R "$APP_PATH" build/Payload/
          (cd build && zip -r "$(basename "$OUTPUT_IPA")" Payload) || exit 1
          echo "Created device ipa: $OUTPUT_IPA"
          ls -la "$OUTPUT_IPA" || true

      - name: Upload Device IPA
        uses: actions/upload-artifact@v4
        with:
          name: com.supergamer474.expirefly-unsigned-ios.ipa
          path: build/com.supergamer474.expirefly-unsigned-ios.ipa

      - name: Get App Version
        id: get_version
        run: |
          VERSION=$(yq '.targets.expirefly.info.properties.CFBundleShortVersionString' project.yml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Check Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG="v$VERSION"
          echo "Checking if release $TAG exists..."
          if command -v gh >/dev/null 2>&1 && gh release view "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Changelog
        id: generate_changelog
        if: steps.check_release.outputs.exists == 'false'
        run: |
          set -e
          VERSION="${{ steps.get_version.outputs.version }}"
          CURRENT_VERSION="$VERSION"
          SINCE_COMMIT=""

          # Walk commits that touched project.yml from newest -> oldest
          for c in $(git rev-list HEAD -- project.yml); do
            file=$(git show "$c:project.yml" 2>/dev/null || true)
            if [ -z "$file" ]; then
              continue
            fi
            v=$(printf "%s" "$file" | yq '.targets.expirefly.info.properties.CFBundleShortVersionString' 2>/dev/null || true)
            if [ -z "$v" ]; then
              continue
            fi
            if [ "$v" != "$CURRENT_VERSION" ]; then
              SINCE_COMMIT="$c"
              break
            fi
          done

          # Always capture HEAD message
          HEAD_MSG=$(git log -1 --pretty=format:%s HEAD || echo "")

          # Derive SINCE_DATE (ISO 8601) from SINCE_COMMIT
          if [ -n "$SINCE_COMMIT" ]; then
            SINCE_DATE=$(git show -s --format=%cI "$SINCE_COMMIT" 2>/dev/null || true)
          else
            SINCE_DATE=""
          fi

          # Determine repo owner/repo
          ORIGIN_URL=$(git remote get-url origin 2>/dev/null || true)
          OWNER_REPO=$(printf "%s" "$ORIGIN_URL" | sed -E 's#.*github.com[:/]+([^/]+/[^/]+)(\.git)?#\1#')

          # Fetch workflow runs
          RUNS_JSON=""
          if [ -n "$OWNER_REPO" ] && command -v gh >/dev/null 2>&1; then
            echo "Fetching recent workflow runs for ${OWNER_REPO}..."
            RUNS_JSON=$(gh api -H "Accept: application/vnd.github+json" \
              /repos/"$OWNER_REPO"/actions/runs \
              -f per_page=100 -f event=push 2>/dev/null || true)
            
            if [ -z "$RUNS_JSON" ] || [ "$(printf "%s" "$RUNS_JSON" | jq '.workflow_runs | length')" -eq 0 ]; then
              RUNS_JSON=$(gh api -H "Accept: application/vnd.github+json" \
                /repos/"$OWNER_REPO"/actions/runs \
                -f per_page=100 -f event=workflow_dispatch 2>/dev/null || true)
            fi
          fi

          WORKFLOW_LINES=""
          if [ -n "$RUNS_JSON" ] && printf "%s" "$RUNS_JSON" | jq -e '.workflow_runs | length > 0' >/dev/null 2>&1; then
            if [ -n "$SINCE_DATE" ]; then
              SINCE_DATE_UTC=$(date -u -j -f "%Y-%m-%dT%H:%M:%S%z" "$SINCE_DATE" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || echo "$SINCE_DATE")
              WORKFLOW_LINES=$(printf "%s" "$RUNS_JSON" | jq -r --arg SINCE "$SINCE_DATE_UTC" '
              [.workflow_runs[] | select(.created_at >= $SINCE)] |
              sort_by(.created_at)[] |
              ( "- " + (.head_commit.message // .name // .workflow_name) +
                " (#" + (.run_number|tostring) + ") — " +
                ((.conclusion // "in_progress") | tostring) +
                " — " + (.created_at // "") +
                " — branch: " + (.head_branch // "") )' || true)
            else
              WORKFLOW_LINES=$(printf "%s" "$RUNS_JSON" | jq -r '
                [.workflow_runs[]] | sort_by(.created_at)[] |
                ( "     - " +
                  (if (.head_commit.message | length) > 0 then .head_commit.message
                   else (if (.name|length) > 0 then .name else .workflow_name end) end) +
                  " (#" + (.run_number|tostring) + ") — " +
                  ((.conclusion // "in_progress") | tostring) +
                  " — " + (.created_at // "") +
                  " — branch: " + (.head_branch // "") )' || true)
            fi

            if [ -n "$WORKFLOW_LINES" ]; then
              WORKFLOW_LINES=$(printf "%s\n" "$WORKFLOW_LINES" | awk 'NF && !seen[$0]++ { print $0 }' || true)
            fi
          fi

          # Fallback to commit messages
          if [ -z "$WORKFLOW_LINES" ]; then
            if [ -n "$SINCE_COMMIT" ]; then
              COMMITS_RAW=$(git log --pretty=format:%s "${SINCE_COMMIT}..HEAD" --reverse 2>/dev/null || true)
              COMMITS_RAW=$(echo "$COMMITS_RAW" | grep -v "Update Expirefly app repo to v" || true)
            else
              COMMITS_RAW=""
            fi
          fi

          # Build description
          printf -v DESC "What's new in Version %s?\n" "$VERSION"

          if [ -n "$HEAD_MSG" ]; then
            DESC+=$'- '"$HEAD_MSG"$'\n'
          fi

          if [ -n "$WORKFLOW_LINES" ]; then
            DESC+="${WORKFLOW_LINES}"$'\n'
          elif [ -n "$COMMITS_RAW" ]; then
            OTHER_LINES=$(printf "%s\n" "$COMMITS_RAW" | awk -v head="$HEAD_MSG" 'NF && $0!=head { print "- "$0 }' || true)
            if [ -n "$OTHER_LINES" ]; then
              DESC+="${OTHER_LINES}"$'\n'
            fi
          fi

          DESC="${DESC%$'\n'}"
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          printf '%s\n' "$DESC" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

  build-android-apk:
    name: Build Android APK
    runs-on: macos-15
    timeout-minutes: 60
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: ~/Library/Android/sdk
          key: android-sdk-${{ runner.os }}-api33-buildtools33.0.0
          restore-keys: android-sdk-${{ runner.os }}-

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '16.0'
          packages: 'platforms;android-33 build-tools;33.0.0'
          accept-android-sdk-licenses: true

      - name: Add Android tools to PATH
        run: |
          echo "ANDROID_HOME=${HOME}/Library/Android/sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=${HOME}/Library/Android/sdk" >> $GITHUB_ENV
          echo "${HOME}/Library/Android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${HOME}/Library/Android/sdk/platform-tools" >> $GITHUB_PATH
        shell: bash

      - name: Install Swift Android SDK
        run: |
          set -e
          # This downloads/installs the Swift Android support that Skip needs
          skip android sdk install
        shell: bash

      - name: Build .apk for Android
        run: |
          set -e
          skip export -d .build/skip-export || true
          echo "Listing skip export output:"
          ls -la .build/skip-export || true
        shell: bash

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: skip-android-artifacts
          path: |
            .build/skip-export/**/*.apk

  create-github-release:
    name: Create GitHub Release
    needs: 
      - build-unsigned-ipa
      - build-android-apk
    if: needs.build-unsigned-ipa.result == 'success' && needs.build-android-apk.result == 'success' && needs.build-unsigned-ipa.outputs.release_exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          # gh (GitHub CLI)
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not found - attempting official installer script"
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y || true
          fi

          echo "gh: $(gh --version 2>/dev/null || echo 'not installed')"

      - name: Download Device IPA
        uses: actions/download-artifact@v4
        with:
          name: com.supergamer474.expirefly-unsigned-ios.ipa
          path: build

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build-unsigned-ipa.outputs.version }}
          CHANGELOG: ${{ needs.build-unsigned-ipa.outputs.changelog }}
        run: |
          TAG="v$VERSION"
          echo "Creating release $TAG with notes:"
          printf '%s\n' "$CHANGELOG"
          DEVICE_IPA="build/com.supergamer474.expirefly-unsigned-ios.ipa"
          gh release create "$TAG" \
            "$DEVICE_IPA" \
            --title "Expirefly v$VERSION" \
            --notes "$CHANGELOG" \
            --repo "$GITHUB_REPOSITORY"
        shell: bash